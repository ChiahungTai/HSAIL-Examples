// Example 3: Producer/consumer using two fbarriers that allow
// producer and consumer wavefront executions to overlap.

version 1:0:$base:$large;
kernel &producerConsumer(kernarg_u32 %data_item_count)
{
  ld_kernarg_u32 $s5, [%data_item_count];
  // Declare the fbarriers.
  fbarrier %produced_fb;
  fbarrier %consumed_fb;

  // Use a single work-item to initialize the fbarriers.
  // if (workitemflatid_u32 == 0) {
  workitemflatid_u32 $s0;
  cmp_ne_u32_u32 $c0, $s0, 0;
  cbr $c0, @BB0_1;
    initfbar %produced_fb;
    initfbar %consumed_fb;
  // }
  @BB0_1:
  
  // Wait for fbarriers to be initialized before using them.
  // No memory fence required as no data has been produced yet.
  barrier_fnone;

  // All work-items join both fbarriers.
  joinfbar %produced_fb;
  joinfbar %consumed_fb;
  // Wait for all fbarriers to join to prevent a race condition
  // between join and subsequent wait.
  // No memory fence required as no data has been produced yet.
  barrier_fnone;
  
  // Ensure all produces and consumers are in the same wavefront
  // so that the fbarrier operations are wavefront uniform.
  // producer = ((workitemflatid_u32 / WAVESIZE) & 1) == 1;  
  div_u32 $s1, $s0, WAVESIZE;
  and_b32 $s2, $s1, 1; 
                              
  // if (producer) {
  cmp_eq_b1_u32 $c1, $s2, 0;
  cbr $c1, @BB0_2;

    // for (i = 1 to data_item_count) {
    mov_u32 $s3, 1;
    @BB0_3:
    cmp_eq_b1_u32 $c2, $s3, $s5;
    cbr $c2, @BB0_4;
    
      // Producer compute new data.

      // Wait until all consumers have processed the previous
      // data before storing the new data.
      // No need for a memory fence as consumer is producing no data
      // used by the consumer.
      waitfbar_fnone %consumed_fb;
      
      // fill in new data in some group segment buffer data.
      // Tell the consumers the data is ready.
      // Using arrive allows the producer to continue computing new data
      // before all consumers have read this data.
      // Memory fence should correspond to segment holding data to
      // make sure it is visible to consumer.
      arrivefbar_fgroup %produced_fb;

    add_u32 $s3, $s3, 1;
    brn @BB0_3;
    // }
  // } else {
  @BB0_2:
    // Tell producer ready to receive new data. This is the
    // initial state of a consumer.
    // No memory barrier required as consumer is not producing any data.
    arrivefbar_fnone %consumed_fb;

    // for (j = 1 to data_item_count) {
    mov_u32 $s4, 1;
    @BB0_5:
    cmp_eq_b1_u32 $c3, $s4, $s5;
    cbr $c3, @BB0_4;
    
      // Wait for all producers to store new data.
      // Memory fence should correspond to segment holding data to make
      // sure it is visible to consumer.
      waitfbar_fgroup %produced_fb;
      
      // Consumer reads the new data

      // Only need to tell producer have read data if there is
      // another value to be produced.
      // if (j != data_item_count) {
      cmp_eq_b1_u32 $c4, $s4, $s5;
      cbr $c4, @BB0_6;
        // Tell producer have read new data.
        // Using arrive allows the consumer to start processing the data
        // before all consumers have read the data.
        // No memory barrier required as consumer is not producing any data.
        arrivefbar_fnone %consumed_fb;
      // }
      @BB0_6:   

      // Consumer processes new data.

    add_u32 $s4, $s4, 1;
    brn @BB0_5;
  // }
  @BB0_4:
  
  // Ensure each work-item leaves the fbarriers it has
  // joined before it terminates.
  leavefbar %produced_fb;
  leavefbar %consumed_fb;
  
  // Wait for fbarriers to be finished with before releasing them.
  // No memory fence required as no data has been produced.
  barrier_fnone;
  
  // Use a single work-item to release the fbarriers.
  // if (workitemflatid_u32 == 0) {
  cbr $c0, @BB0_7;
    releasefbar %produced_fb;
    releasefbar %consumed_fb;
  // }
  @BB0_7:
  ret;
};
