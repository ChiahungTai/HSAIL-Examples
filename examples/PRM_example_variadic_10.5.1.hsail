version 1:0: $base : $small;
// --- END: added to example to be accepted by parser

function &maxofN(arg_f32 %r)(arg_u32 %n, align 8 arg_u8 %last[])
{
  ld_arg_u32 $s0, [%n]; // s0 holds the number to add
  mov_b32 $s1, 0; // s1 holds the sum
  mov_b32 $s3, 0; // s3 is the offset into last
  @loop:
  cmp_eq_b1_u32 $c1, $s0, 0; // see if the count is zero
  cbr $c1, @done; // if it is, jump to done
  ld_arg_f32 $s4, [%last][$s3]; // load a value
  add_f32 $s1, $s1, $s4; // add the value
  add_u32 $s3, $s3, 4; // advance the offset to the next element
  sub_u32 $s0, $s0, 1; // decrement the count
  brn @loop;
  @done:
  st_arg_f32 $s1, [%r];
  ret;
};

kernel &adder()
{ // here is an example caller passing in 4 32-bit floats
  {
  align 8 arg_u8 %n[16];
  st_arg_f32 1.2f, [%n][0];
  st_arg_f32 2.4f, [%n][4];
  st_arg_f32 3.6f, [%n][8];
  st_arg_f32 6.1f, [%n][12];
  arg_u32 %count;
  st_arg_u32 4, [%count];
  arg_f32 %sum;
  call &maxofN(%sum)(%count, %n);
  ld_arg_f32 $s0, [%sum];
  }
// ... %s0 holds the sum
};
